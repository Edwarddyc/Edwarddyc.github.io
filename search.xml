<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Machine Learning:base &amp; advance</title>
    <url>/2025/06/11/Machine-Learning-base-advance/</url>
    <content><![CDATA[<p>机器学习常用于数据预处理、数据分析和数据挖掘之中。在今天主流的观念中，机器学习会被分为传统机器学习和深度学习两种，传统机器学习具有更好的可解释性，如针对回归问题的线性回归、针对分类问题的逻辑回归，树（KNN），支持向量机（SVM），还有一些聚类算法如K-Means，PCA，层次聚类（Hierarchical Clustering），关联规则等。而对于深度学习问题，则是基于很多层构建的如MLP，CNN（卷积层, Yolo），RNN（LSTM），Transformer(decoder, encoder, Bert, Chatgpt…)。</p>
<p>在这篇文章中，重点记录和整理我对于机器学习的理解，以构建自己的知识网络。我分为Base和Advance两个部分，base部分讲解基础，Advance部分记录一些机器学习更高级的应用如Ensemble等。</p>
<h2 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h2><p>在学习传统机器学习的时候，第一个概念是supervised learning、unsupervised learning和unsupervised learning，即监督学习、非监督学习和半监督学习。评判的标准是是否有标签（label），有标签就是supervised learning（用各项指标预测癌症，癌症是标签，各项指标是data，常用于预测或者分类），无标签（没有预定的答案，如可以用DBSCAN去发现社群关系，用PCA去降低数据维度，常用于预处理任务），还有半监督学习（强调利用少量标注数据+大量未标注数据进行训练，是一种针对成本节约而诞生的问题）</p>
<p>同时，对于数据类型问题，常会面对两种数据类型，连续性数据如房屋面积、离散性数据如地理位置。对于连续性数据，常用的预处理方法是归一化（normalization&#x2F;standardization），具体有Min-max Scaling，Z-Score standarlization，Robust Scaling、Log Transform，Quanruke Normalization；而对于离散型数据，最著名的方法是One-hot Encoding（独热编码），除此以外还有序号编码（Ordinary Encoding），目标编码（Target Encoding）。</p>
<h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h3><p>回归问题的应用是基于一些特征（data）去预测一个实例的具体数值（label），如可以基于周边的配套设施，房屋面积，地理位置信息等去预测房价。</p>
<p>在思考回归问题的时候，有一种思考方式是基于矩阵的角度思考然后直接通过矩阵运算得到系数，另外一种是最小二乘法去不断求解，是一种简单优化问题，即最小化Loss。</p>
<h4 id="Linear-regression"><a href="#Linear-regression" class="headerlink" title="Linear regression"></a>Linear regression</h4><h4 id="Lasso"><a href="#Lasso" class="headerlink" title="Lasso"></a>Lasso</h4><h4 id="Ridge"><a href="#Ridge" class="headerlink" title="Ridge"></a>Ridge</h4><h4 id="Elastic-Net"><a href="#Elastic-Net" class="headerlink" title="Elastic - Net"></a>Elastic - Net</h4><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><h2 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h2>]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础架构</title>
    <url>/2025/05/30/MySQL%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>本篇文章重点讲解MySQL的基础架构问题，同时会说明在MySQL问题上一般需要重点关注的问题。</p>
<p>了解MySQL的基础架构可以从一条MySQL语句的执行顺序去学习。MySQL大体可以分为Server层和引擎层。Server层包括连接器、缓存、分析器、优化器、执行器。存储引擎层提供数据库的读写接口，是插件式架构，最常用的是InnoDB，除此之外还有MyISAM，Memory。</p>
<h2 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h2><p>Server层涵盖了MySQL大多数的核心服务功能以及所有的内置函数（如时间、日期、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p>
<h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p><strong>管理连接，权限验证</strong>。</p>
<p>连接&amp;长连接&amp;短连接</p>
<p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。先连接，再在权限表中检查权限。如果连接之后没有后续动作就会处于空闲状态，使用 show processlist可以查看，sleep表示这个连接处于空闲状态。客户端如果长时间没有动静，连接器就会自动断开，这个时间是由wait_timeout控制的，默认值是8个小时。</p>
<p>数据库连接分为长连接和短连接两种，长连接指一次连接成功后，如果客户端持续请求则一直使用一个连接。短连接指的是每次连接完成很短的几次查询后就断开。不过MySQL在使用长连接的时候会面临一个问题，MySQL在使用过程的时候临时内存保存在连接对象上，这些资源在连接断开才会释放。长连接容易因为内存过大被操作系统强行杀掉。</p>
<p>解决措施：定期断开长连接；MySQL5.7之后，可以通过mysql_reset_connection重新初始化同时不用重新连接。</p>
<h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p><strong>命中则直接返回结果</strong>。</p>
<p>select语句优化</p>
<p>之前执行的语句和结果可能以key-value存储在内存上。如果发现当前执行的语句之前执行过，可以通过缓存返回。不过不建议使用，因为查询失败率很高，只要有一个表更新则缓存就会被清空。同时，在MySQL8.0之后删除了这个功能。</p>
<h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p><strong>词法分析，语法分析</strong>。</p>
<p>没有命中查询缓存，则开始真正执行语句。先做词法分析，再做语法分析。</p>
<h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p><strong>执行计划生成，索引选择</strong>。</p>
<p>索引</p>
<p>当有多个索引的时候，优化器来决定选择哪个索引；当有多个表的时候，优化器来决定先使用哪个表。当优化器完成优化的时候，这个语句的执行方案就已经完成了。</p>
<h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p><strong>操作引擎，返回结果</strong>。</p>
<p>权限验证</p>
<p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p>
<p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p>
<h2 id="引擎层"><a href="#引擎层" class="headerlink" title="引擎层"></a>引擎层</h2><p>不同的引擎对于表数据的取数方法不同，对于事物和锁的支持也不同。</p>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>对事务的支持，redo log的实现，行锁的实现。</p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><h2 id="问题综述"><a href="#问题综述" class="headerlink" title="问题综述"></a>问题综述</h2><h3 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h3><ol>
<li>连接器会鉴权用户是否具有连接 MySQL 实例的权限，包括用户的账号和密码是否正确，以及用户是否被授予连接权限。</li>
<li>分析器会鉴权用户是否具有对所请求的数据库和表的查询权限，包括是否具有查询、插入、更新、删除等操作的权限，以及是否具有访问某些列的权限。</li>
<li>执行器会鉴权用户是否具有执行所请求的操作的权限，包括对表的读、写等操作权限，以及是否具有执行存储过程和触发器的权限。</li>
</ol>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日志系统</title>
    <url>/2025/05/30/MySQL%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>日志系统是为了从各种意外中恢复而诞生的机制，在之后发展的时候又延申了许多功能。在MySQL中，最先被发明的是在Server层的binlog（用于主从复制和数据恢复），之后InnoDB实现了Redo Log（防止崩溃）和undo log（支持事务）。除此以外，还有error log（记录MySQL服务器启动、运行或停止时出现的错误信息），general query log（记录所有到达MySQL服务器的语句），slow query log（记录执行时间超过 <code>long_query_time</code>的查询，用于性能分析和优化），Relay log（主从复制中，从服务器保存主服务器binlog的中间日志），等等。本篇文章先重点介绍binlog, redo log和undo log之后再延展一些相关的使用。</p>
<h2 id="Redo-Log"><a href="#Redo-Log" class="headerlink" title="Redo Log"></a>Redo Log</h2><p>特点：WAL ( Write-Ahead Logging )</p>
<p>功能：crash-safe(即使异常重启，之前提交的记录也不会丢)</p>
<p>层次：引擎层</p>
<p>具体实现：</p>
<ol>
<li>更新的时候，基于WAL机制，先写日志，再更新内存，等空闲的时候再去写磁盘。</li>
<li>InnoDB特有</li>
<li>InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写</li>
<li>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。write pos 和 checkpoint 之间的是log上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示log满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</li>
</ol>
<h2 id="Bin-Log"><a href="#Bin-Log" class="headerlink" title="Bin Log"></a>Bin Log</h2><p>功能：</p>
<p>层次：Server层</p>
<p>具体实现：</p>
<h2 id="Undo-Log"><a href="#Undo-Log" class="headerlink" title="Undo Log"></a>Undo Log</h2><p>功能：</p>
<p>层次：</p>
<p>具体实现：</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引优化</title>
    <url>/2025/06/06/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="索引作用"><a href="#索引作用" class="headerlink" title="索引作用"></a>索引作用</h2><p>索引的出现是为了提高数据查询的效率，如同书的目录一样。</p>
<h2 id="索引模型"><a href="#索引模型" class="headerlink" title="索引模型"></a>索引模型</h2><p>常见的索引模型有哈希表，有序数组和搜索树（B+树）。</p>
<p>InnoDB的索引由B+树实现，其中主键树的叶子节点为数据，非叶子节点为主键的具体值。普通索引的叶子节点是具体的主键值。同时，InnoDB的自适应哈希索引（InnoDB hash index）对频繁访问的索引页自动在内存中建立哈希索引。</p>
<p>特点：B+树是多路平衡查找树，适合磁盘存储。支持等值查询，同时叶子节点通过指针连接，支持高效的范围查询。</p>
<p>Memory的索引实现由哈希表实现。</p>
<h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="唯一性索引和普通索引的选择（change-buffer的优化机制）"><a href="#唯一性索引和普通索引的选择（change-buffer的优化机制）" class="headerlink" title="唯一性索引和普通索引的选择（change buffer的优化机制）"></a>唯一性索引和普通索引的选择（change buffer的优化机制）</h3><h3 id="索引选错问题（优化层的工作原理）"><a href="#索引选错问题（优化层的工作原理）" class="headerlink" title="索引选错问题（优化层的工作原理）"></a>索引选错问题（优化层的工作原理）</h3>]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>一个Java程序的从生到死</title>
    <url>/2025/06/11/%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BB%8E%E7%94%9F%E5%88%B0%E6%AD%BB/</url>
    <content><![CDATA[<p>在学习Java的时候，一个重点就是学习如何实现它如何实现”Write Once, Run anywhere”。而这其中的一个重点就是计算机运行Java的流程，其如何将.java文件转换成.class文件再到计算机底层CPU可以识别的二进制文件。在第一个转换中，涉及到了JDK中的javac组件，属于Java前端编译中的一部分；在第二个转换中，则涉及到了JVM的诸多细节，如执行引擎中的JIT Compiler即时编译、Garbage Collect垃圾回收，Java运行时数据区的VM stack、方法区、程序计数器PC等等细节的实现。我力图在整理Java程序运行的流程中，梳理好从javac到JVM中的每一步细节，可以将知识点连接起来。</p>
<h2 id="前端编译：-java到-class"><a href="#前端编译：-java到-class" class="headerlink" title="前端编译：.java到.class"></a>前端编译：.java到.class</h2><p>javac(JDK内部，JVM外部)</p>
<p>对于JVM来说，实际的输入是字节码文件，但是我们写好的是Java文件。所以我们需要通过javac来讲Java文件编译成字节码文件然后再传入JVM中。具体的步骤包括如下：程序源码-&gt;词法分析-&gt;单词流-&gt;语法分析（将Token流转换成AST）-&gt;抽象语法树-&gt;语义分析器-&gt;注解抽象语法树-&gt;字节码生成器-&gt;JVM字节码，这称之为前端编译。</p>
<p>抽象语法树（AST）：反映代码的语法结构（如运算符、变量名、表达式嵌套等），由语法分析阶段生成。</p>
<p>注解抽象语法树：在原始AST的基础上，通过语义分析添加了语义信息，例如：变量&#x2F;方法的数据类型（如b是int还是String）、符号的作用域（如b是局部变量还是类字段）、表达式的合法性（如b + 1是否类型兼容）。</p>
<ul>
<li><strong>词法分析</strong>：解决“是什么单词”的问题。</li>
<li><strong>语法分析</strong>：解决“单词如何组合”的问题。</li>
<li><strong>语义分析</strong>：解决“组合是否有意义”的问题。</li>
</ul>
<h2 id="JVM编译阶段（解释器-JIT-Compiler）：-class到机器指令"><a href="#JVM编译阶段（解释器-JIT-Compiler）：-class到机器指令" class="headerlink" title="JVM编译阶段（解释器&amp;JIT Compiler）：.class到机器指令"></a>JVM编译阶段（解释器&amp;JIT Compiler）：.class到机器指令</h2><p>（JVM内部）</p>
<p>JVM阶段的输入是字节码文件而非源文件，这种设置就是为了“write once, run anywhere”。因为如C语言，因为需要设计到一些具体的函数与操作系统相关，不同的操作系统对应的函数就需要修改。而对于字节码来说，JVM的存在可以承担起对于每个平台的适配性。解释器就是将字节码文件中的内容“翻译”为对应平台的本地机器指令去执行。</p>
<p>解释器承担了主要的编译工作，而JIT Compiler是一种针对hotspot的优化机制，所以说Java是一种半解释半编译的语言。</p>
<h3 id="解释器的分类"><a href="#解释器的分类" class="headerlink" title="解释器的分类"></a>解释器的分类</h3><p>字节码解释器 &amp; 模板解释器</p>
<p>字节码解释器：需要在执行代码时通过纯软件代码模拟字节码的执行，效率十分低；</p>
<p>模板解释器：每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，能提高性能。</p>
<ul>
<li>Hotspot中，解释器主要有Intepreter模块和Code模块。<ul>
<li>Intepreter模块：实现了解释器的核心功能；</li>
<li>Code模块：用于管理Hotspot在运行时生成的本地机器指令。</li>
</ul>
</li>
</ul>
<h3 id="JIT-Compiler"><a href="#JIT-Compiler" class="headerlink" title="JIT Compiler"></a>JIT Compiler</h3><p>JIT编译器，Just In Time Compiler，又名即时编译器。根据它，JVM可将源代码直接编译为和本地机器平台相关的机器语言指令。</p>
<p>Hotspot虚拟机采用二者并存的方式，在jvm执行过程中，二者相互协助，取长补短。在jvm启动的时候，解释器先发挥作用，随着程序运行时间的推移，即时编译器发挥作用，根据热点检测功能，将有价值的字节码编译为本地机器指令，以换取更高的执行效率。</p>
<p>通过jconsole的vm模块可以看到使用JIT Compiler的情况。</p>
<h3 id="后端编译优化"><a href="#后端编译优化" class="headerlink" title="后端编译优化"></a>后端编译优化</h3><p>Hotspot code “热点代码”：当虚拟机发现某个方法或代码块的运行特别频繁，就会被认为是热点代码。在运行时，虚拟机会把这些代码编译为本地机器码，并尽可能地优化。</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis初印象</title>
    <url>/2025/07/04/Redis%E5%88%9D%E5%8D%B0%E8%B1%A1/</url>
    <content><![CDATA[<p>在求职的准备阶段中，看到很多朋友都说要准备Redis（Remote Dictionary Server），我才开始学习。然后了解到的第一个印象是写缓存，另一个印象是键值数据库（类似于Bigtable的数据库，但是区别于MySQL的关系型数据库）。我通过极客时间的 <em>Redis 核心技术与实战</em>来学习，建立了对于Redis的第一印象。这篇笔记就是整理自己对于Redis的理解。</p>
<h2 id="Redis知识全景图"><a href="#Redis知识全景图" class="headerlink" title="Redis知识全景图"></a>Redis知识全景图</h2><p>Redis的知识全景图包括了“两大维度、三大系统”：</p>
<ul>
<li>应用维度：缓存应用、集群应用、数据结构应用</li>
<li>系统维度：<ul>
<li>高性能主线：（单线程模型、数据结构、AOF、Epoll网络架构）</li>
<li>高可用主线：（主从复制、哨兵机制、RDB）</li>
<li>高可扩展主线：（数据分片、负载均衡）</li>
</ul>
</li>
</ul>
<p>联系到之前学习的计算机知识里面，在第一次学习时我分为了四个模块 。</p>
<ol>
<li>数据结构：Redis数据类型有String、List、Hash、Set和Sorted Set共五个。其底层实现上有简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组。其中哈希表采用的是链式方法来解决哈希冲突的问题，而压缩列表和跳表是我比较关注的数据结构（在其他地方见到的比较少）。</li>
<li>单线程开发：并发开发讨论的一般都是多线程问题，而在这里Redis利用了作为内存数据库的优势，反而使用单线程达到了高性能的优势。</li>
<li>高可用性：日志问题，使用AOF文件日志和RDB快照来保证数据在宕机之后保持可恢复性。</li>
<li>分布式架构：分布式架构涉及到了Redis的高可用性和高可扩展性。Redis采用的是一主多从，主库和从库都可以读取数据，主库可以写入 修改数据，同时哨兵集群（形同监工）负责整体数据库的监控、选主和通知。而对于数据库的可扩展性，采用横向扩展即数据切片的方式，由多个Hash Slot和Redis实例来负责数据的存储，此时就会涉及到负载均衡的问题。（在学习分布式架构的时候，我现在习惯去和GFS的单Master架构（GFS好像就是多了一个单节点负责管理数据切片的，对于单节点的哨兵机制和这里很像），还有MySQL的主从架构去比较，感觉有很多相似之处）</li>
</ol>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="键值对数据结构"><a href="#键值对数据结构" class="headerlink" title="键值对数据结构"></a>键值对数据结构</h3><p>首先，需要学习的是Redis是一种键值数据库，Redis使用了一个哈希表来保存所有键值对。一个哈希表就是一个数组，数组的每个元素称为一个哈希桶。哈希桶中的元素保存的并不是值本身，而是指向具体值的指针。哈希桶中的 entry 元素中保存了key和value指针，分别指向了实际的键和值，这样一来，即使值是一个集合，也可以通过*value指针被查找到。</p>
<p>当哈希表由于太小而导致链过长了之后，会进行rehash来扩容。在具体的实现上，Redis默认使用两个全局哈希表。一开始使用哈希表1，而哈希表2没有分配额外的空间，当需要进行rehash的时候。为哈希表2分配大于哈希表1的空间，然后把哈希表1的数据重新映射到哈希表2中，之后释放哈希表1的空间并留作下一次扩容使用。不过由于一次全量复制会造成Redis线程阻塞，所以Redis采用渐进式rehash，即处理一次请求再处理一个索引下的entries的重映射复制（这里很像AOF的重写，不过是把大文件变成小文件）</p>
<h3 id="Value数据结构"><a href="#Value数据结构" class="headerlink" title="Value数据结构"></a>Value数据结构</h3><p>键值对中值的数据结构有”String、List、Hash、Set、Sorted Set”，其底层的数据结构对应如下：</p>
<ul>
<li>String字符串：简单动态字符串</li>
<li>List列表：双向链表、压缩列表</li>
<li>Hash哈希：哈希表、压缩列表</li>
<li>Sorted Set集合：跳表、压缩列表</li>
<li>Set有序集：哈希表、整数数组</li>
</ul>
<p>String 类型的底层实现只有一种数据结构，也就是简单动态字符串。而 List、Hash、Set 和 Sorted Set 这四种数据类型，都有两种底层实现结构。通常情况下，我们会把这四种类型称为集合类型，它们的特点是一个键对应了一个集合的数据。</p>
<p>可以见到，集合的底层数据结构包括五个：双向链表、压缩列表、哈希表、跳表和整数数组。其中整数数组、哈希表和双向链表都比较熟悉，这里着重记录一下压缩列表和跳表。</p>
<h4 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h4><p>压缩列表的思想会让我想到网络传输里面TCP的数据头，或者JAVA并发开发里面线程的数据头，本质是就是在数据上增加描述数据的信息。压缩列表在表头有三个字段，zlbytes、zltail和zllen，在尾部有zlend。</p>
<p>其中，zlbytes：整个压缩列表占用的内存字节数。 zltail：从压缩列表起始地址到最后一个节点的字节数。 zllength：压缩列表包含的节点个数。 entries：一系列节点，每个节点代表一个键值对或者列表项。 zlend：特殊值0xFF，表示压缩列表的结束标志。</p>
<p><strong>应用场景</strong>：在列表、散列和有序集合的长度较短或者体积较小的时候，Redis可以选择使用一种名为压缩列表（ziplist）的紧凑存储方式来存储这些结构。压缩列表是列表、散列和有序集合这3种不同类型的对象的一种非结构化（unstructured）表示：与Redis在通常情况下使用双链表表示列表、使用散列表表示散列、使用散列表加上跳跃表（skiplist）表示有序集合的做法不同，压缩列表会以序列化的方式存储数据，这些序列化数据每次被读取的时候都要进行解码，每次被写入的时候也要进行局部的重新编码，并且可能需要对内存里面的数据进行移动。压缩列表的设计不是为了查询的，而是为了减少内存的使用和内存的碎片化。</p>
<h4 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h4><p>因为有序链表的按序查找非常慢，所以设计了跳表这个数据结构。跳表在链表的基础上，增加了多级索引，通过索引位置的几个跳转，实现数据的快速定位。查找的时间复杂度是O(log(N))</p>
<h3 id="不同操作的复杂度"><a href="#不同操作的复杂度" class="headerlink" title="不同操作的复杂度"></a>不同操作的复杂度</h3><p>直接记录原书的“四句口诀”：</p>
<ul>
<li>单元素操作是基础；（对单元素的增删改查，普遍都是O(1)）</li>
<li>范围操作非常耗时；（遍历操作，复杂度普遍为O(N)）</li>
<li>统计操作通常高效；（因为数据结构中一般都有记录元素个数所以高效）</li>
<li>例外情况只有几个。（压缩列表和双向链表都会记录表头和表尾的偏移量，在头尾的操作高效）</li>
</ul>
<h2 id="高性能IO模型"><a href="#高性能IO模型" class="headerlink" title="高性能IO模型"></a>高性能IO模型</h2><p>我在思考这个问题的时候首先想到的是并发开发（原书也是这么提的），因为一般程序都会考虑通过多线程并发开发来缓和CPU寄存器、Cache、内存和磁盘之间数据读写速度不一致导致的资源浪费问题。但是Redis却反其道而行选择用单线程，所以我觉得这里是一个重点。</p>
<h3 id="为什么多线程不行"><a href="#为什么多线程不行" class="headerlink" title="为什么多线程不行"></a>为什么多线程不行</h3><p>多线程的缺点就在于对共享资源的访问上，为了保持一致性，常需要锁等手段来保证安全访问，增加了额外的开销。如果锁的设计出现问题，即使增加了线程，大部分线程都在等待获取访问共享资源的互斥锁，并行变成串行。因此，Redis选择直接采用单线程模型，简化代码增加可维护性。</p>
<h3 id="单线程Redis为什么那么快"><a href="#单线程Redis为什么那么快" class="headerlink" title="单线程Redis为什么那么快"></a>单线程Redis为什么那么快</h3>]]></content>
  </entry>
  <entry>
    <title>MySQL事务隔离</title>
    <url>/2025/06/06/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</url>
    <content><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务的定义"><a href="#事务的定义" class="headerlink" title="事务的定义"></a>事务的定义</h2><p>事务是指作为单个逻辑工作单元执行的一系列操作，这些操作要么全部执行成功，要么全部不执行，保证数据库从一个一致的状态转变为另一个一致状态。核心目的：保证并发程序的顺利执行。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;  -- 或者 BEGIN</span><br><span class="line"></span><br><span class="line">-- 执行SQL语句</span><br><span class="line">INSERT INTO accounts (user_id, balance) VALUES (1, 1000);</span><br><span class="line">UPDATE accounts SET balance = balance - 100 WHERE user_id = 1;</span><br><span class="line">UPDATE accounts SET balance = balance + 100 WHERE user_id = 2;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 或者回滚事务</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure></div>

<h2 id="事务的基本特性-ACID"><a href="#事务的基本特性-ACID" class="headerlink" title="事务的基本特性 ACID"></a>事务的基本特性 ACID</h2><ul>
<li>A 原子性：保证事务中的所有操作要么全部执行，要么全部不执行；</li>
<li>C 一致性：事务执行前后，数据库从一个一致状态转换为另一个一致状态；</li>
<li>I 隔离性：多个事务并发执行的时候，事务之间互不影响；</li>
<li>D 持久性：事务一旦提交，结果是永久的。</li>
</ul>
<p>有一种角度思考事务的基本特性，就是通过事务的原子性，隔离性和持久性去实现事务的一致性。</p>
<h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><p>在涉及到事务的隔离性上时，首先要明白为什么需要隔离性。因为当多个事务并发执行的时候，容易出现以下问题：</p>
<ul>
<li>脏读：指一个事务可以读到其他事务未提交的修改（修改问题）；</li>
<li>不可重复读：指一个事务重复读同一个记录时，前后内容不一致（修改问题）；</li>
<li>幻读：指一个事务重复读同一个记录时，前后数量不一致（插入问题）；</li>
</ul>
<h2 id="事务隔离级别的具体定义"><a href="#事务隔离级别的具体定义" class="headerlink" title="事务隔离级别的具体定义"></a>事务隔离级别的具体定义</h2><p>事务的隔离级别由低到高为：读未提交，读已提交，可重复读，串行化。随着事务的隔离级别越来越高，事务的执行效率也越来越低。</p>
<ul>
<li>读未提交：一个事务可以读取另一个事务未提交的修改；</li>
<li>读已提交：一个事务可以读取另一个事务已提交的修改；</li>
<li>可重复读：一个事务执行过程中看到的数据总是和启动时的数据保持一致；</li>
<li>串行化：对于同一行记录，读会加读锁，写会加写锁。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完才能开始执行。<ul>
<li>串行化下锁的具体规则<ul>
<li>读锁（共享锁&#x2F;S锁）与写锁（排他锁&#x2F;X锁）会冲突</li>
<li>读锁与读锁不会冲突</li>
<li>写锁与写锁会冲突</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="事务的具体实现"><a href="#事务的具体实现" class="headerlink" title="事务的具体实现"></a>事务的具体实现</h2><p>首先，事务的具体实现依靠的是执行引擎InnoDB，它实现了多种锁和MVCC来应对并发问题时的事务隔离性问题。</p>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>在事务的可重复读的隔离条件下，由数据库的多版本并发控制（MVCC）来支持。MVCC类似于一种视图概念，是在事务启动的时候针对整个库的一种快照。InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。</p>
<p>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。<br>因此，一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。（根据undo log回滚）</p>
<p>InnoDB为每个事务在启动的时候构建了一个数组，用来保存这个事务在启动瞬间，当前正在“活跃”的所有事务ID。数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。<br>这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。</p>
<p>InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>MySQL里的锁大致可以分为全局锁、表锁和行锁。</p>
<h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p>
<p><strong>应用场景</strong>：全库逻辑备份（通过FTWRL来确保数据库不会被其他线程修改，此时的数据库是只读的状态）</p>
<p>全库逻辑备份的方法二：在可重复读隔离级别下开启一个事务（拿到一致性视图，MVCC）-（mysqldump官方自带的逻辑备份工具，使用参数-single-transaction）。</p>
<p>全库逻辑备份的方法三：将数据库设置为readonly（不过不建议这样做，因为通常会依赖数据库是否是readonly来判断是主库还是备库，同时应对异常处理机制上也有差异，FTWRL会在异常后恢复，但是readonly会保持只读状态）</p>
<h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>MySQL里面表级锁有两种：一种是表锁，另一种是MDL（meta data lock）。</p>
<ul>
<li>表锁的语法是 lock tables … read&#x2F;write。与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</li>
<li>另一类表级的锁是 MDL（metadata lock)。<strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上</strong>。MDL 的作用是，保证读写的正确性。<strong>MDL作用是防止DDL(data definition language)和DML(data manipulation language)并发的冲突</strong><ul>
<li>MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。<ul>
<li>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</li>
<li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>InnoDB支持行锁但是MyISAM不支持行锁。</p>
<h3 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h3><p>在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束的时候才释放。</p>
<p>（优化思路：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放）。</p>
<h3 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h3><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p>
<p>当发生死锁的时候，会有两种策略：</p>
<ul>
<li>一种策略是，直接进入等待，直到超时。通过参数innodb_lock_wait_timeout来设置；</li>
<li>另一种策略是，发起死锁检测，当检测到死锁的时候，回滚某一个事务并让其他事务继续执行。通过参数innodb_deadlock_detect设置为on启动。（常用，优化思路-&gt;控制并发度）</li>
</ul>
<h2 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h2><p>如果只有行锁的话，两个事务在并发执行的时候，事务A在重复读取一个数据的时候，如果事务B插入了一个数据，事务A有可能会读取到这个新的数据上去。而这就是幻读问题，既一个事务在重复读取同一个条件的时候，两次读取的结果数是不同的。</p>
<p>在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此，幻读是在“当前读”下才会出现的（select for update：当前读，对数据加写锁；select share in mode：当前读，对数据加读锁）</p>
<h1 id="开发架构"><a href="#开发架构" class="headerlink" title="开发架构"></a>开发架构</h1><p>我认为在思考并发问题的时候，事务的设计和锁的实现保障了在本地的MySQL数据库能合理解各种决并发问题。不过，为了应对更大的需求量，会有主从架构的出现来缓解访问压力，我认为这里也需要考虑主备的一致性问题，所以把它算在了并发问题的第三部分。</p>
<h2 id="一主一备"><a href="#一主一备" class="headerlink" title="一主一备"></a>一主一备</h2><h3 id="MySQL主备的基本原理"><a href="#MySQL主备的基本原理" class="headerlink" title="MySQL主备的基本原理"></a>MySQL主备的基本原理</h3><p>客户端的读写都直接访问节点A，而节点B作为节点A的备库，只是将A的更新都同步过来，到本地执行。</p>
<p>一般会把节点B设置为只读模式（readonly），原因如下：（同步更新的线程拥有超级权限可以无视readonly）</p>
<ol>
<li>有时候一些运营类的查询语句会被放到备库上去查，设置为只读可以防止误操作；</li>
<li>防止切换过程，因为双写产生bug；</li>
<li>可以用readonly去判断是否为备库。</li>
</ol>
<p>备库 B 跟主库 A 之间维持了一个长连接。主库 A 内部有一个线程，专门用于服务备库 B 的这个长连接。一个事务日志同步的完整过程是这样的：</p>
<ol>
<li>在备库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。</li>
<li>在备库 B 上执行 start slave 命令，这时候备库会启动两个线程，就是 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接，sql_thread负责在本地执行binlog上的更新语句。</li>
<li>主库 A 校验完用户名、密码后，开始按照备库 B 传过来的位置，从本地读取 binlog，发给 B。</li>
<li>备库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。</li>
<li>sql_thread 读取中转日志，解析出日志里的命令，并执行。</li>
</ol>
<h3 id="双M结构"><a href="#双M结构" class="headerlink" title="双M结构"></a>双M结构</h3><p>上述是M-S结构，实际工作中更常用的是双M结构，区别在于双M结构的节点A和节点B互为主备关系。这样在切换的时候不需要再修改主备关系。</p>
<p>问题：因为互为备库，所以会出现循环复制的问题，以下是解决方案：</p>
<ul>
<li>规定两个库的 server id 必须不同，如果相同，则它们之间不能设定为主备关系；</li>
<li>一个备库接到 binlog 并在重放的过程中，生成与原 binlog 的 server id 相同的新的 binlog；</li>
<li>每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。</li>
</ul>
<p>按照这个逻辑，如果我们设置了双 M 结构，日志的执行流就会变成这样：</p>
<ul>
<li>从节点 A 更新的事务，binlog 里面记的都是 A 的 server id；</li>
<li>传到节点 B 执行一次以后，节点 B 生成的 binlog 的 server id 也是 A 的 server id；</li>
<li>再传回给节点 A，A 判断到这个 server id 与自己的相同，就不会再处理这个日志。所以，死循环在这里就断掉了。</li>
</ul>
<h2 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h2>]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
